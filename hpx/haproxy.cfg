global
    log stdout format raw local0 info
    maxconn 500
    user root
    group root

defaults
    mode http
    log global
    log-format '{"host":"%H","time":"%Tl","totalTime":"%Tt","serverTime":"%Tr","client_ip":"%ci","backend":"%b","frontend":"%ft","server":"%s","upload":"%U","download":"%B","statusCode":"%ST","method":"%HM","uri":"%[capture.req.uri,json(utf8s)]","body":"%[capture.req.hdr(0),json(utf8s)]"}'
    timeout tunnel 12h
    option  dontlognull
    retries 999
    option redispatch
    timeout connect  100000
    timeout client  200000
    timeout server  200000
    compression algo gzip
    # slowloris protection
    timeout http-request 5s
    option http-buffer-request


resolvers docker_resolver
    nameserver dns 127.0.0.11:53
    parse-resolv-conf

    hold valid    15s
    hold other    30s
    hold refused  30s
    hold nx       30s
    hold timeout  30s
    hold obsolete 30s

    resolve_retries 3
    timeout retry 1s
    timeout resolve 1s

listen stats
    bind *:1936 ssl crt /ssl/certificado.pem  alpn h2,http/1.1
    http-request use-service prometheus-exporter if { path /metrics }
    stats enable
    stats refresh 10s
    stats show-node
    stats uri  /stats
    stats admin if TRUE
    stats auth root:lsblk

########################################################## FRONTEND HTTPS ########################################################

frontend webserver
    bind *:443   ssl crt /ssl/certificado.pem  alpn h2,http/1.1  #https
    bind *:9200  ssl crt /ssl/certificado.pem  alpn h2,http/1.1  #secure elasticsearch
    bind :80

    option http-buffer-request
    declare capture request len 10000
    http-request capture req.body id 0
    http-request redirect scheme https unless { ssl_fc }
    
    # DDOS Section
    # rate limit

    http-request track-sc0 src table per_ip_rates 
    http-request deny deny_status 429 if { sc_http_req_rate(0) gt 100 } # limit to 100 requests per 10 seconds
    http-request deny if HTTP_1.0 # block HTTP/1.0 requests
    http-request deny if { req.hdr(user-agent) -i -m sub phantomjs slimerjs } # block headless browsers
    http-request silent-drop unless { req.hdr(user-agent) -m found } # block empty user-agents
    http-request silent-drop if { src -f /usr/local/etc/haproxy/blacklist.acl } # silent drop from blacklist
    http-request silent-drop if { sc_http_req_rate(0) gt 100 } # silent drop if rate limit exceeded

    # End of DDOS Section
    
    acl is_grafana hdr(host) -i grafana.iagorlabs.tech

    # acl is_loki path -i -m beg /loki/

    use_backend grafana_be if is_grafana
    default_backend grafana_be

    http-response set-header X-Frame-Options SAMEORIGIN
    http-response set-header X-Content-Type-Options nosniff
    http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains"


######################################################### BACKENDS ###########################################################

backend grafana_be
    compression type text/html text/plain text/css application/json
    http-request set-header X-Forwarded-Proto https if { ssl_fc }
    http-request set-header X-Forwarded-Port %[dst_port]
    http-request set-header X-Forwarded-For  %[src]
    http-request set-header X-Forwarded-Host %[req.hdr(Host)]
    server grafana grafana:3000 check resolvers docker_resolver init-addr last,127.0.0.1

backend loki_be
    compression type text/html text/plain text/css application/json
    http-request set-header X-Forwarded-Proto https if { ssl_fc }
    http-request set-header X-Forwarded-Port %[dst_port]
    http-request set-header X-Forwarded-For  %[src]
    http-request set-header X-Forwarded-Host %[req.hdr(Host)]
    server loki loki:3000 check resolvers docker_resolver init-addr last,127.0.0.1



backend per_ip_rates
    stick-table type ip size 1m expire 10m store http_req_rate(10s)
